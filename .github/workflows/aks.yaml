name: Terraform CI/CD

on:
  push:
    branches:
      - main
      - master
      - dev
      - feature

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORKDIR }}/.terraform
            ${{ env.WORKDIR }}/.terraform.lock.hcl
          key: terraform-${{ github.ref_name }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            terraform-${{ github.ref_name }}-

      - name: Terraform Init (Validation)
        run: terraform init
        working-directory: aks-cluster/environments/dev
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: aks-cluster/environments/dev

  deploy:
    name: Deploy to ${{ github.ref_name }}-staging-env
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Generate SSH Key Pair
        id: generate-ssh-key
        run: |
          mkdir -p .ssh
          ssh-keygen -t rsa -b 4096 -C "${{ github.ref_name }}-deploy" -f .ssh/id_rsa -N ""
          echo "SSH_PUBLIC_KEY=$(cat .ssh/id_rsa.pub)" >> $GITHUB_ENV

      - name: Set environment-specific values
        id: set-env
        run: |
          if [ "${{ github.ref_name }}" == "dev" ]; then
            echo "WORKDIR=aks-cluster/environments/dev" >> $GITHUB_ENV
            echo "STORAGE_ACCOUNT=pilotgabdevbackend2025" >> $GITHUB_ENV
            echo "STATE_KEY=dev.terraform.tfstate" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "WORKDIR=aks-cluster/environments/staging" >> $GITHUB_ENV
            echo "STORAGE_ACCOUNT=pilotgabstagebackend2025" >> $GITHUB_ENV
            echo "STATE_KEY=stage.terraform.tfstate" >> $GITHUB_ENV
          else
            echo "WORKDIR=aks-cluster/environments/prod" >> $GITHUB_ENV
            echo "STORAGE_ACCOUNT=pilotgabprodbackend2025" >> $GITHUB_ENV
            echo "STATE_KEY=prod.terraform.tfstate" >> $GITHUB_ENV
          fi

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORKDIR }}/.terraform
            ${{ env.WORKDIR }}/.terraform.lock.hcl
          key: terraform-${{ github.ref_name }}-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            terraform-${{ github.ref_name }}-

      - name: Configure backend for remote state
        run: |
          cat > ${{ env.WORKDIR }}/backend.tf <<EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "terraform-state-rg"
              storage_account_name = "${{ env.STORAGE_ACCOUNT }}"
              container_name       = "tfstate"
              key                  = "${{ env.STATE_KEY }}"
            }
          }
          EOF

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKDIR }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Plan
        run: |
          terraform import azurerm_virtual_network.this /subscriptions/2fdeef7a-f11a-4a4e-8db7-b318d3f3d86a/resourceGroups/stage-pilotgab-rg/providers/Microsoft.Network/virtualNetworks/pilotgab-vnet
          terraform plan -var="ssh_public_key=${{ env.SSH_PUBLIC_KEY }}"
        working-directory: ${{ env.WORKDIR }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Terraform Apply
        continue-on-error: true
        run: terraform apply  -auto-approve -var="ssh_public_key=${{ env.SSH_PUBLIC_KEY }}"
        working-directory: ${{ env.WORKDIR }}
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
